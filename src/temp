#include <ros/ros.h>
#include "smm_kdl_utils/smm_kin_tools.h"
#include <geometry_msgs/Pose.h>
#include <visualization_msgs/Marker.h>

void publishPoseMarker(const ros::Publisher& marker_pub, const geometry_msgs::Pose& pose, const std::string& frame_id, const std::string& ns, int id, const std::string& type, const Eigen::Vector3f& scale, const Eigen::Vector4f& color) {
    visualization_msgs::Marker marker;
    marker.header.frame_id = frame_id;
    marker.header.stamp = ros::Time::now();
    marker.ns = ns;
    marker.id = id;

    if (type == "arrow") {
        marker.type = visualization_msgs::Marker::ARROW;
    } else if (type == "sphere") {
        marker.type = visualization_msgs::Marker::SPHERE;
    } else if (type == "cube") {
        marker.type = visualization_msgs::Marker::CUBE;
    } else {
        ROS_WARN_STREAM("Invalid marker type: " << type << ". Using default (arrow).");
        marker.type = visualization_msgs::Marker::ARROW;
    }

    marker.action = visualization_msgs::Marker::ADD;
    marker.pose = pose;
    marker.scale.x = scale[0];
    marker.scale.y = scale[1];
    marker.scale.z = scale[2];
    marker.color.r = color[0];
    marker.color.g = color[1];
    marker.color.b = color[2];
    marker.color.a = color[3];
    marker.lifetime = ros::Duration();

    marker_pub.publish(marker);
}

int main(int argc, char** argv) {
    ros::init(argc, argv, "test_smm_kdl_ikp");
    ros::NodeHandle nh;

    ros::Publisher marker_pub = nh.advertise<visualization_msgs::Marker>("target_pose_marker", 1);
    ros::Publisher pose_pub = nh.advertise<geometry_msgs::Pose>("target_pose", 1);


    std::string base_link_name_str;
    if (!nh.getParam("base_link_name", base_link_name_str)) {
        ROS_ERROR("Failed to get 'base_link_name' parameter.");
        return -1;
    }

    std::string tcp_link_name_str;
    if (!nh.getParam("tcp_link_name", tcp_link_name_str)) {
        ROS_ERROR("Failed to get 'tcp_link_name' parameter.");
        return -1;
    }

    SmmKinTools kin_tools(base_link_name_str, tcp_link_name_str,nh);

    // [I] DEFINE DIFFERENCE BETWEEN LAS URDF LINK FRAME ORIGIN && ACTUAL ROBOT TCP
    Eigen::Matrix4d T_last_to_tcp; // T_last_to_tcp = g_tool * gmt0 in matlab script: build_massage_tool.m
    T_last_to_tcp << 1, 0, 0, 0.0,  
                    0, 1, 0, -0.005,
                    0, 0, 1, 0.0615, 
                    0, 0, 0, 1;

    // [II] DEFINE TARGET POINT % This should be loaded from yaml file
    std::vector<double> des_tcp_pos_vec;
    if (!nh.getParam("des_tcp_pos", des_tcp_pos_vec) || des_tcp_pos_vec.size() != 3) {
        ROS_ERROR("[test_smm_kdl_ikp] Missing or invalid parameter: des_tcp_pos");
        return false;
    }
    Eigen::Vector3f x_tcp_d;
    x_tcp_d[0] = static_cast<float>(des_tcp_pos_vec[0]);
    x_tcp_d[1] = static_cast<float>(des_tcp_pos_vec[1]);
    x_tcp_d[2] = static_cast<float>(des_tcp_pos_vec[2]);

    // [III] BUILD THE COMPLETE TARGET POSE
    geometry_msgs::Pose target_pose;
    // Set desired pose x_tcp_d
    target_pose.position.x = x_tcp_d[0];
    target_pose.position.y = x_tcp_d[1];
    target_pose.position.z = x_tcp_d[2];
    // Set orientation -> dummy - will be update based on orientation obtained by the
    //                    "initial guess in the solver" to enhance convergence 
    target_pose.orientation.x = 0.0;  
    target_pose.orientation.y = 0.0;  
    target_pose.orientation.z = 0.0;  
    target_pose.orientation.w = 1.0;  

    pose_pub.publish(target_pose);
    Eigen::Vector3f scale(0.2, 0.05, 0.05);
    Eigen::Vector4f color(1.0, 0.0, 0.0, 1.0);
    publishPoseMarker(marker_pub, target_pose, base_link_name_str, "target_pose_namespace", 0, "arrow", scale, color);

    // [IV] KDL IKP SOLVER
    std::vector<double> joint_positions;
    bool success = kin_tools.computeIK(target_pose, joint_positions, T_last_to_tcp, nh);

    // [V] PRINT THE RESULT
    Eigen::Vector3f q_d  = Eigen::Vector3f::Zero();
    if (success) {
        // Populate q_d with the solution and print
        for (size_t i = 0; i < joint_positions.size(); ++i) {
            if (i < 3) { // Ensure bounds for Eigen::Vector3f
                q_d[i] = static_cast<float>(joint_positions[i]);
            }
        }
        // Print the joint positions
        std::cout << "[test_smm_kdl_ikp] Inverse Kinematics Solution: " << q_d.transpose() << std::endl;
    } else {
        ROS_WARN("[test_smm_kdl_ikp] IK computation failed.");
    }

    ros::spin();
    return 0;
}
